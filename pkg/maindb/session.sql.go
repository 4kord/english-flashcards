// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: session.sql

package maindb

import (
	"context"
	"time"
)

const countSessions = `-- name: CountSessions :one
SELECT COUNT(*) FROM sessions
WHERE user_id = $1
`

func (q *Queries) CountSessions(ctx context.Context, userID int32) (int64, error) {
	row := q.db.QueryRowContext(ctx, countSessions, userID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createSession = `-- name: CreateSession :one
INSERT INTO sessions (refresh_token, user_agent, user_id, expires_at)
VALUES ($1, $2, $3, $4)
RETURNING id, refresh_token, user_agent, user_id, expires_at, created_at
`

type CreateSessionParams struct {
	RefreshToken string
	UserAgent    string
	UserID       int32
	ExpiresAt    time.Time
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) (*Session, error) {
	row := q.db.QueryRowContext(ctx, createSession,
		arg.RefreshToken,
		arg.UserAgent,
		arg.UserID,
		arg.ExpiresAt,
	)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.RefreshToken,
		&i.UserAgent,
		&i.UserID,
		&i.ExpiresAt,
		&i.CreatedAt,
	)
	return &i, err
}

const deleteOldestSession = `-- name: DeleteOldestSession :exec
DELETE FROM sessions
WHERE created_at = (SELECT MIN(created_at) FROM sessions)
`

func (q *Queries) DeleteOldestSession(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteOldestSession)
	return err
}

const deleteSession = `-- name: DeleteSession :exec
DELETE FROM sessions
WHERE id = $1
`

func (q *Queries) DeleteSession(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteSession, id)
	return err
}

const deleteSessionByToken = `-- name: DeleteSessionByToken :exec
DELETE FROM sessions
WHERE refresh_token = $1
`

func (q *Queries) DeleteSessionByToken(ctx context.Context, refreshToken string) error {
	_, err := q.db.ExecContext(ctx, deleteSessionByToken, refreshToken)
	return err
}

const getSession = `-- name: GetSession :one
SELECT id, refresh_token, user_agent, user_id, expires_at, created_at FROM sessions
WHERE id = $1
`

func (q *Queries) GetSession(ctx context.Context, id int32) (*Session, error) {
	row := q.db.QueryRowContext(ctx, getSession, id)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.RefreshToken,
		&i.UserAgent,
		&i.UserID,
		&i.ExpiresAt,
		&i.CreatedAt,
	)
	return &i, err
}

const getSessionByToken = `-- name: GetSessionByToken :one
SELECT id, refresh_token, user_agent, user_id, expires_at, created_at FROM sessions
WHERE refresh_token = $1
`

func (q *Queries) GetSessionByToken(ctx context.Context, refreshToken string) (*Session, error) {
	row := q.db.QueryRowContext(ctx, getSessionByToken, refreshToken)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.RefreshToken,
		&i.UserAgent,
		&i.UserID,
		&i.ExpiresAt,
		&i.CreatedAt,
	)
	return &i, err
}
