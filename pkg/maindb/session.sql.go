// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: session.sql

package maindb

import (
	"context"
	"time"
)

const countSessions = `-- name: CountSessions :one
SELECT COUNT(*) FROM sessions
WHERE user_id = $1
`

func (q *Queries) CountSessions(ctx context.Context, userID int32) (int64, error) {
	row := q.db.QueryRowContext(ctx, countSessions, userID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createSession = `-- name: CreateSession :one
INSERT INTO sessions (session, user_id, ip, expires_at)
VALUES ($1, $2, $3, $4)
RETURNING id, session, user_id, ip, expires_at, created_at
`

type CreateSessionParams struct {
	Session   string
	UserID    int32
	Ip        string
	ExpiresAt time.Time
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) (*Session, error) {
	row := q.db.QueryRowContext(ctx, createSession,
		arg.Session,
		arg.UserID,
		arg.Ip,
		arg.ExpiresAt,
	)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.Session,
		&i.UserID,
		&i.Ip,
		&i.ExpiresAt,
		&i.CreatedAt,
	)
	return &i, err
}

const deleteOldestSession = `-- name: DeleteOldestSession :exec
DELETE FROM sessions
WHERE created_at = (SELECT MIN(created_at) FROM sessions)
`

func (q *Queries) DeleteOldestSession(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteOldestSession)
	return err
}

const getSession = `-- name: GetSession :one
SELECT id, session, user_id, ip, expires_at, created_at FROM sessions
WHERE id = $1
`

func (q *Queries) GetSession(ctx context.Context, id int32) (*Session, error) {
	row := q.db.QueryRowContext(ctx, getSession, id)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.Session,
		&i.UserID,
		&i.Ip,
		&i.ExpiresAt,
		&i.CreatedAt,
	)
	return &i, err
}
