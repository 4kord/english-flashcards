// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: deck.sql

package maindb

import (
	"context"
)

const createDeck = `-- name: CreateDeck :one
INSERT INTO decks (user_id, name, is_premade)
VALUES ($1, $2, $3)
RETURNING id, user_id, name, amount, is_premade, created_at
`

type CreateDeckParams struct {
	UserID    int32
	Name      string
	IsPremade bool
}

func (q *Queries) CreateDeck(ctx context.Context, arg CreateDeckParams) (*Deck, error) {
	row := q.db.QueryRowContext(ctx, createDeck, arg.UserID, arg.Name, arg.IsPremade)
	var i Deck
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Amount,
		&i.IsPremade,
		&i.CreatedAt,
	)
	return &i, err
}

const deckAmountDownByCard = `-- name: DeckAmountDownByCard :exec
UPDATE decks
SET amount = amount - 1
WHERE id = (SELECT deck_id FROM cards WHERE cards.id = $1)
`

func (q *Queries) DeckAmountDownByCard(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deckAmountDownByCard, id)
	return err
}

const deckAmountUp = `-- name: DeckAmountUp :exec
UPDATE decks
SET amount = amount + 1
WHERE id = $1
`

func (q *Queries) DeckAmountUp(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deckAmountUp, id)
	return err
}

const deleteDeck = `-- name: DeleteDeck :exec
DELETE FROM decks
WHERE id = $1
`

func (q *Queries) DeleteDeck(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteDeck, id)
	return err
}

const editDeck = `-- name: EditDeck :one
UPDATE decks
SET name = $2
WHERE id = $1
RETURNING id, user_id, name, amount, is_premade, created_at
`

type EditDeckParams struct {
	ID   int32
	Name string
}

func (q *Queries) EditDeck(ctx context.Context, arg EditDeckParams) (*Deck, error) {
	row := q.db.QueryRowContext(ctx, editDeck, arg.ID, arg.Name)
	var i Deck
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Amount,
		&i.IsPremade,
		&i.CreatedAt,
	)
	return &i, err
}

const getDecks = `-- name: GetDecks :many
SELECT id, user_id, name, amount, is_premade, created_at FROM decks
WHERE user_id = $1
`

func (q *Queries) GetDecks(ctx context.Context, userID int32) ([]*Deck, error) {
	rows, err := q.db.QueryContext(ctx, getDecks, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Deck
	for rows.Next() {
		var i Deck
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Name,
			&i.Amount,
			&i.IsPremade,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPremadeDecks = `-- name: GetPremadeDecks :many
SELECT id, user_id, name, amount, is_premade, created_at FROM decks
WHERE is_premade = true
`

func (q *Queries) GetPremadeDecks(ctx context.Context) ([]*Deck, error) {
	rows, err := q.db.QueryContext(ctx, getPremadeDecks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Deck
	for rows.Next() {
		var i Deck
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Name,
			&i.Amount,
			&i.IsPremade,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
